name: Docs staging deploy for PRs
run-name: Publish docs to staging website (for PR)

on:
    pull_request:

    # Allow running from the actions tab
    workflow_dispatch:
        inputs:
            schema_branch:
                description: 'Schema branch to pull from for /reference'
                required: true
                default: 'main'

permissions:
    id-token: write
    contents: read

env:
    # Using same bucket name as for staging deployment 
    BUCKET_NAME: 's3://docs-staging.fused.io'
    CLOUDFRONT_ID: 'E33Z2H4C1WZOKH'

jobs:
  build_and_publish:
    environment:
      name: staging
      url: https://docs-staging.fused.io/pr/${{github.event.number}}
    name: Build documentation and publish to staging
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3

          # Auth with OIDC:
          # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::926411091187:role/github_website_role
            role-session-name: GithubFusedLabsFusedPyReleaseDocs
            aws-region: us-west-2

        - name: Use Node.js
          id: setup-node
          uses: actions/setup-node@v3
          with:
            node-version: 23.1.0

        - name: Cache node modules
          id: cache-npm
          uses: actions/cache@v3
          env:
            cache-name: cache-node-modules
            with:
            # npm cache files are stored in `~/.npm` on Linux/macOS
            path: ~/.npm
            key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
                ${{ runner.os }}-build-${{ env.cache-name }}-
                ${{ runner.os }}-build-
                ${{ runner.os }}-

        - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
          name: List the state of node modules
          continue-on-error: true
          run: npm list

        - name: Install dependencies
          run: npm install

        - name: Build docs
          env:
            DEPLOYMENT_URL: 'https://docs-staging.fused.io'
            BASE_URL: '/pr/${{github.event.number}}'
            IS_STAGING: 'true'
          run: npm run build
        
        - name: Test critical links locally
          run: |
            # Start local server in background
            npx serve build -l 8080 &
            SERVER_PID=$!
            
            # Wait for server to be ready (with timeout)
            echo "Waiting for server to start..."
            for i in {1..10}; do
              if curl -s http://localhost:8080/ > /dev/null; then
                echo "Server ready after ${i} attempts"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ Server failed to start after 10 attempts"
                kill $SERVER_PID
                exit 1
              fi
              sleep 1
            done
            
            # Test critical pages
            echo "Testing critical links..."
            curl -f http://localhost:8080/ || (echo "❌ Homepage failed" && exit 1)
            curl -f http://localhost:8080/blog/ || (echo "❌ Blog failed" && exit 1)
            curl -f http://localhost:8080/quickstart/ || (echo "❌ Quickstart failed" && exit 1)
            curl -f http://localhost:8080/tutorials/ || (echo "❌ Tutorials failed" && exit 1)
            
            # Kill server
            kill $SERVER_PID
            echo "✅ All critical links work locally"
        
        # Is this correct? 
        - name: Copy Docusaurus website to staging bucket to new PR prefix ${{env.BUCKET_NAME}}/pr/${{github.event.number}}/
          run: |
            aws --region us-east-2 s3 sync --delete --storage-class INTELLIGENT_TIERING build ${{env.BUCKET_NAME}}/pr/${{github.event.number}}

        - name: Invalidate CloudFront distribution for PR
          shell: bash
          run: |
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths '/pr/${{github.event.number}}/*'
            
        - name: Wait for deployment and test staging links
          run: |
            STAGING_URL="https://docs-staging.fused.io/pr/${{github.event.number}}"
            echo "Testing staging deployment at $STAGING_URL"
            
            # Wait for staging to be ready (with timeout)
            echo "Waiting for staging deployment to be accessible..."
            for i in {1..20}; do
              if curl -s -f "$STAGING_URL/" > /dev/null; then
                echo "Staging ready after ${i} attempts"
                break
              fi
              if [ $i -eq 20 ]; then
                echo "❌ Staging deployment not accessible after 20 attempts"
                exit 1
              fi
              sleep 3
            done
            
            # Test critical pages on staging
            echo "Testing all critical staging links..."
            curl -f "$STAGING_URL/" || (echo "❌ Staging homepage failed" && exit 1)
            curl -f "$STAGING_URL/blog/" || (echo "❌ Staging blog failed" && exit 1)
            curl -f "$STAGING_URL/quickstart/" || (echo "❌ Staging quickstart failed" && exit 1)
            curl -f "$STAGING_URL/tutorials/" || (echo "❌ Staging tutorials failed" && exit 1)
            
            echo "✅ All critical links work on staging"